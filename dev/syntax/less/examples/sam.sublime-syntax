%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: sam
file_extensions:
  - sam
scope: source.sam
contexts:
  main:
    - match: '^@HD'
      scope: header.id.sam
      push: header_entry_hd

    - match: '^@SQ'
      scope: header.id.sam
      push: header_entry_sq

    - match: '^@RG'
      scope: header.id.sam
      push: header_entry_rg

    - match: '^@PG'
      scope: header.id.sam
      push: header_entry_pg

    - match: '^@CO'
      scope: header.id.sam
      push: header_entry_co

    - match: "^"
      scope: string.sam
      push: alignment_entry

  header_entry_hd:
    - meta_scope: string.sam
    - match: '(?<=[A-Z]{2}:)"'
      scope: invalid.sam
      push: header_entry_quote
    - match: '(?<=VN:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: constant.numeric.sam
    - match: '(?<=SO:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=GO:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '$'
      pop: true

  header_entry_sq:
    - meta_scope: string.sam
    - match: '(?<=[A-Z]{2}:)"'
      scope: invalid.sam
      push: header_entry_quote
    - match: '(?<=SN:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: coord.Chr.sam
    - match: '(?<=LN:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: coord.Start.sam
    - match: '(?<=AH:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=AN:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=AS:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=M5:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=SP:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=UR:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: $
      pop: true

  header_entry_rg:
    - meta_scope: string.sam
    - match: '(?<=[A-Z]{2}:)"'
      scope: invalid.sam
      push: header_entry_quote
    - match: '(?<=ID:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: support.constant.sam
    - match: '(?<=LB:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: support.constant.sam
    - match: '(?<=CN:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=DS:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=DT:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=FO:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=KS:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=LB:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=PG:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: variable.parameter.sam
    - match: '(?<=PI:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=PL:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=PM:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=PU:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: keyword.sam
    - match: '(?<=SM:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: support.constant.sam
    - match: $
      pop: true

  header_entry_pg:
    - meta_scope: string.sam
    - match: '(?<=[A-Z]{2}:)"'
      scope: invalid.sam
      push: header_entry_quote
    - match: '(?<=ID:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: variable.parameter.sam
    - match: '(?<=PN:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: variable.parameter.sam
    - match: '(?<=CL:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: invalid.sam
    - match: '(?<=PP:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: variable.parameter.sam
    - match: '(?<=DS:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: string.sam
    - match: '(?<=VN:)(.+?(?=\s+[A-Z]{2}:)|.+$)'
      scope: constant.numeric.sam
    - match: $
      pop: true

  header_entry_co:
    - meta_scope: string.sam
    - match: '(?<=[A-Z]{2}:)"'
      scope: comment.line.sam
      push: header_entry_quote
    - match: $
      pop: true

  header_entry_quote:
    - meta_scope: invalid.sam
    - match: '"'
      pop: true

  alignment_entry: 
    - meta_scope: keyword.sam
    - match: "\t(?=([A-Z]{2}:.+:.+)\t)"
      scope: string.sam
      push: data_tag_entry

    - match: "\t(?=[ACGTN]+\t)"
      push: nucleotide_sequence

    - match: "\tchr[A-Za-z0-9_\\-]*\t"
      push: chromosome_coordinate

    - match: "chr[A-Za-z0-9_\\-]*\t"
      push: rnext

    - match: "\t(?=([0-9]+[MIDNSHPX=])+\t)"
      push: cigar_str
    - match: "\t[\\*]\t" # Unavailable data
      scope: string.sam

    - match: "(?<=\t)[=](?=\t)"
      scope: nt.A.sam
    - match: "(?<==)\t[0-9]*"
      scope: coord.Start.sam

    - match: "(?<=\t)[\\*](?=\t)"
      scope: nt.T.sam
    - match: "(?<=\\*)\t[0-9]*"
      scope: keyword.sam

    - match: "(?<=\t)[0-9]+(?=\t)"
      scope: invalid.sam # Not working

    - match: "\t(?=[!-~]+\t)"
      push: sequence_quality
    - match: "$"
      pop: true

  chromosome_coordinate:
    - meta_scope: coord.Chr.sam
    - match: "\t[0-9]*"
      scope: coord.Start
    - match: "[0-9]*(?=\t)"
      pop: true

  rnext:
    - meta_scope: keyword.sam
    - match: "\t[0-9]*"
      scope: keyword.Start
    - match: "[0-9]*(?=\t)"
      pop: true

  nucleotide_sequence:
    - meta_scope: string.sam
    - match: "A"
      scope: nt.A.sam
    - match: "C"
      scope: nt.C.sam
    - match: "G"
      scope: nt.G.sam
    - match: "T"
      scope: nt.T.sam
    - match: "N"
      scope: nt.N.sam
    - match: "(?=\t)"
      pop: true

  data_tag_entry: 
    - meta_scope: string.sam
      # Data Classes: numeric / string / class
      # A Printable
      # i signed integer
      # f floating point
      # Z string with spaces
      # H byte array hex
      # B Integer/Numeric Array
    - match: "[A-Z]{2}(?=:)"
      scope: string.sam
    - match: "(?<=:)[AifZHB]:"
      scope: comment.line.sam

    - match: "(?<=[ifH]:)(.+?(?=\t)|.+$)"
      scope: constant.numeric.sam
    - match: "(?<=[AZB]:)(.+?(?=\t)|.+$)"
      scope: storage.type.sam

    - match: "$"
      pop: true

  cigar_str:
    - meta_scope: string.sam
    - match: "\t"
      pop: true

  sequence_quality: 
    - meta_scope: string.sam
    # Phred Illumina 1.8+ Scale
    - match: "[\\!\\#\\$]"
      scope: grad.bw0
    - match: "[%\\&\\'\\(]"
      scope: grad.bw1
    - match: "[\\)\\*\\+\\,]"
      scope: grad.bw2
    - match: "[\\-\\.\\/0]"
      scope: grad.bw3
    - match: "[1-4]"
      scope: grad.bw4
    - match: "[5-8]"
      scope: grad.bw5
    - match: "[9\\:\\;\\<]"
      scope: grad.bw6
    - match: "[\\=\\>\\?\\@]"
      scope: grad.bw7
    - match: "[ABCD]"
      scope: grad.bw8
    - match: "[EFGHIJ]"
      scope: grad.bw9
    - match: "[K-Z\\[\\\\]"
      scope: grad.bw10
    - match: "[\\]\\^\\_\\`a-f]"
      scope: grad.bw10
    - match: "[g-p]"
      scope: grad.bw10
    - match: "[q-z]"
      scope: grad.bw10
    - match: "[\\{\\|\\}\\~]"
      scope: grad.bw10
    # - match: "!"
    #   scope: invalid.sam
    # - match: "\""
    #   scope: invalid.sam
    # - match: "#"
    #   scope: invalid.sam
    # - match: "$"
    #   scope: invalid.sam
    # - match: "%"
    #   scope: invalid.sam
    # - match: "&"
    #   scope: invalid.sam
    # - match: "\\'"
    #   scope: invalid.sam
    # - match: "\\("
    #   scope: invalid.sam
    # - match: "\\)"
    #   scope: invalid.sam
    # - match: "\\*"
    #   scope: invalid.sam
    # - match: "\\+"
    #   scope: invalid.sam
    # - match: ","
    #   scope: invalid.sam
    # - match: "-"
    #   scope: invalid.sam
    # - match: "\\."
    #   scope: invalid.sam
    # - match: "/"
    #   scope: invalid.sam
    # - match: "0"
    #   scope: invalid.sam
    # - match: "1"
    #   scope: invalid.sam
    # - match: "2"
    #   scope: invalid.sam
    # - match: "3"
    #   scope: invalid.sam
    # - match: "4"
    #   scope: invalid.sam
    # - match: "5"
    #   scope: invalid.sam
    # - match: "6"
    #   scope: invalid.sam
    # - match: "7"
    #   scope: invalid.sam
    # - match: "8"
    #   scope: invalid.sam
    # - match: "9"
    #   scope: invalid.sam
    # - match: ":"
    #   scope: invalid.sam
    # - match: ";"
    #   scope: invalid.sam
    # - match: "<"
    #   scope: invalid.sam
    # - match: "="
    #   scope: invalid.sam
    # - match: ">"
    #   scope: invalid.sam
    # - match: "\\?"
    #   scope: invalid.sam
    # - match: "@"
    #   scope: invalid.sam
    # - match: "A"
    #   scope: invalid.sam
    # - match: "B"
    #   scope: invalid.sam
    # - match: "C"
    #   scope: invalid.sam
    # - match: "D"
    #   scope: invalid.sam
    # - match: "E"
    #   scope: invalid.sam
    # - match: "F"
    #   scope: invalid.sam
    # - match: "G"
    #   scope: invalid.sam
    # - match: "H"
    #   scope: invalid.sam
    # - match: "I"
    #   scope: invalid.sam
    # - match: "J"
    #   scope: invalid.sam
    # - match: "K"
    ##   scope: invalid.sam
    - match: "(?=\t)"
      pop: true
